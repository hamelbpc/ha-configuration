esphome:
  name: ttgo-t-display
  includes:
    - esphomeRemote/MenuGlobals.h
    - esphomeRemote/MenuTitle.h
    - esphomeRemote/FriendlyNameEntity.h
    - esphomeRemote/TextHelpers.h
    - esphomeRemote/esphomeRemotePlayer.h
    - esphomeRemote/esphomeRemoteService.h
    - esphomeRemote/esphomeRemoteLight.h
    - esphomeRemote/esphomeRemoteSensor.h
    - esphomeRemote/DisplayUpdateInterface.h
    - esphomeRemote/esphomeRemote.h
    - esphomeRemote/esphomeRemoteRotary.h
    - esphomeRemote/MohanMenuGlobals.h
    - esphomeRemote/MohanPages.h
  libraries:
    - ArduinoJson
  platformio_options:
    build_flags: -std=gnu++17
    build_unflags: -std=gnu++11
    #platform: https://github.com/Jason2866/platform-espressif32.git#esphome
    platform: https://github.com/platformio/platform-espressif32.git#feature/arduino-upstream
    platform_packages:
      #- toolchain-xtensa32@~3.80200.200512
      #- toolchain-xtensa32@2.50200.97
      - framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#idf-release/v4.4


substitutions:
  boot_name: '"Fire Remote <3"'
  friendly_name: "M5Fire Remote"
  wifi_ssid: mycrib
  wifi_password: peachspeak38
  large_font_size: "24"
  medium_font_size: "15"
  small_font_size: "14"
  icon_size: "18"
  icon_size_large: "19"
  header_height: "16"
  margin_size: "4"
  scroll_bar_width: "6"
  bottom_bar_margin: "1"
  now_playing_max_lines: "5"
  draw_now_playing_menu: "false"
  draw_battery_level: "true"
  draw_volume_level: "false"
  draw_shuffle_disabled: "false"
  draw_header_time: "true"
  color_accent_primary_red: 0%
  color_accent_primary_green: 45%
  color_accent_primary_blue: 68%
  display_timeout: "10000"
  sleep_after: "7200"
  menu_rollover_on: "false"
  sync_active_player: "true"
  dark_mode: "true"

<<: !include esphomeRemote/sharedRemoteConfig.yaml

sensor:
## Rotary
  - platform: rotary_encoder
    filters:
    - throttle: 0.01s
    name: "Rotary Encoder"
    internal: true
    pin_a:
      number: 12
      mode:
        input: true
        pullup: true
    pin_b:
      number: 13
      mode:
        input: true
        pullup: true
    id: rotary
    on_clockwise:
      - lambda: |-
          buttonPressWakeUpDisplay();
    on_anticlockwise:
      - lambda: |-
          buttonPressWakeUpDisplay();
          
## Needed to debounce screen updates for rotary. 17ms is close to 60fps for st7789v
  - platform: template
    id: display_update_tick
    filters:
      - debounce: 17ms
    on_value :
      then:
        - lambda: |-
            displayUpdateDebounced();
          
## Battery
  #- platform: adc
  #  pin: 34
  #  attenuation: 11db
  #  name: "vccadc"
  #  update_interval: 250ms
  #  id: vcc_adc
  #  internal: true
    #on_value:
    #  then:
    #    lambda: |-
    #      if (id(vcc_adc).state > 2.23) {
    #        if (charging == false) {
    #          charging = true;
    #        }
    #      } else {
    #        if (charging == true) {
    #          charging = false;
    #        }
    #      }
    #      id(vcc_adc_avg).publish_state(id(vcc_adc).state);
  - platform: template
    id: vcc_adc_avg
    filters:
      - sliding_window_moving_average:
          window_size: 4
          send_every: 4
    #on_value :
    #  then:
    #    - sensor.template.publish:
    #        id: batteryVoltage
    #        state: !lambda 'return id(vcc_adc).state;'
  - platform: template
    name: batteryVoltage
    id: batteryVoltage
    internal: true
    unit_of_measurement: 'V'
    #on_value :
    #  then:
    #    - sensor.template.publish:
    #        id: batteryPercent
    #        state: !lambda 'return (id(batteryVoltage).state * 118) - 162;'
  - platform: template
    name: Battery Percent
    id: batteryPercent
    unit_of_measurement: '%'
    #on_value_range:
    #  below: 5
    #  then:
    #    lambda: |-
    #      ESP_LOGE("SLEEP", "Low Power Supply %.3fV! Sleeping to protect battery", id(batteryPercent).state);
    #      id(sleep_toggle).turn_on();

switch:  
  - platform: template
    name: Sleep Toggle
    id: sleep_toggle
    optimistic: true
    on_turn_on:
      then:
        - deep_sleep.enter:
            id: deep_sleep_1
  - platform: gpio
    pin:
      number: 27
      inverted: false
    id: comb
    internal: true
  - platform: gpio
    pin:
      number: 26
      inverted: false
    id: coma
    internal: true
  - platform: gpio
    pin: GPIO4
    name: "Backlight"
    id: backlight
    internal: true
    restore_mode: RESTORE_DEFAULT_ON

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: "T-Display Button Input 0"
    id: tdisplay_button_input_0
    internal: true
    on_press:
      then:
      - lambda: |-
          pressButton1();           
    #on_release:
    #  then:
    #  - lambda: |-
    #      buttonReleaseScreenLeft();
    
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "T-Display Button Input 1"
    id: tdisplay_button_input_1
    internal: true
    on_press:
      then:
      - lambda: |-
          buttonPressScreenRight();
          //pressButton2();
          //pressButton2();

esp32:
  board: featheresp32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  id: homeassistantapi

ota:

wifi:
  ssid: mycrib
  password: peachspeak38

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ttgo-T-Display Fallback Hotspot"
    password: "5Z0OeWeAO03V"

captive_portal:
    
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    model: TTGO TDisplay 135x240
    id: my_display
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 90Â°
    #auto_clear_enabled: false
    #brightness: 0.5
    #update_interval: 5s
    lambda: |-   
      //ESP_LOGD("idleTime", "%d", idleTime);
      if (idleTime < 0) {
        idleTime = 0;
        ESP_LOGD("backlight", "turning on");
        id(backlight).turn_on();         
      }
      //drawMenu();
      //drawCustomRootMenu();
      drawTastyMenu();
      ESP_LOGD("std", "%ld", __cplusplus);
      
      
