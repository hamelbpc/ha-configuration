substitutions:
  hatoken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI0MzA4YTc1OWI3YjI0OTFkYmZkNTBhZTE3NzM1ZDdmMSIsImlhdCI6MTY3Njc4MDEzNywiZXhwIjoxOTkyMTQwMTM3fQ.9u0X_pXfeIUdznuaDVd82TNp_4L4REagWIMc-9vskdU"

esphome:
  name: toproomd1mini
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: 600.0
    then:
      - delay: 1s
      - output.turn_on: gpio_red
      - binary_sensor.template.publish:
          id: toproom_red
          state: ON
      - binary_sensor.template.publish:
          id: toproom_yellow
          state: OFF
      - binary_sensor.template.publish:
          id: toproom_green
          state: OFF
      - delay: 30s
      - if:
          condition:
            wifi.connected
          then:
            - output.turn_off: gpio_red
            - output.turn_on: gpio_yellow
            - binary_sensor.template.publish:
                id: toproom_yellow
                state: OFF
            - binary_sensor.template.publish:
                 id: toproom_green
                 state: OFF            
      - delay: 5s

http_request:
  useragent: esphome/device
  timeout: 10s

wifi:
  ssid: "MelbPC-NUE"
  password: "peachspeak38"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "toproomd1mini"

logger:
   
web_server:

api:

ota:

output:
  - platform: gpio
    pin: D5
    id: gpio_red
  - platform: gpio
    pin: D6
    id: gpio_yellow
  - platform: gpio
    pin: D7
    id: gpio_green

binary_sensor:
  - platform: template
    name: red
    id: toproom_red
  - platform: template
    name: yellow
    id: toproom_yellow
  - platform: template
    name: green
    id: toproom_green        

script:
  - id: change_red
    parameters:
      new_state: bool
      turn_off_yellow_green: bool
    then:
      - if:
          condition:
            lambda: |-
              return new_state;
          then:
            output.turn_on: gpio_red
          else:
            output.turn_off: gpio_red
      - if:
          condition:
            lambda: |-
              return turn_off_yellow_green;
          then:
            - output.turn_off: gpio_yellow
            - output.turn_off: gpio_green

  - id: change_yellow
    parameters:
      new_state: bool
      turn_off_red_green: bool
    then:
      - if:
          condition:
            lambda: |-
              return new_state;
          then:
            output.turn_on: gpio_red
          else:
            output.turn_off: gpio_red
      - if:
          condition:
            lambda: |-
              return turn_off_red_green;
          then:
            - output.turn_off: gpio_yellow
            - output.turn_off: gpio_green

  - id: change_green
    parameters:
      new_state: bool
      turn_off_red_yellow: bool
    then:
      - if:
          condition:
            lambda: |-
              return new_state;
          then:
            output.turn_on: gpio_red
          else:
            output.turn_off: gpio_red
      - if:
          condition:
            lambda: |-
              return turn_off_red_yellow;
          then:
            - output.turn_off: gpio_yellow
            - output.turn_off: gpio_green            

  - id: statuslights
    then:
      - http_request.get:
          url: http://192.168.81.162:8123/api/
          headers:
            Content-Type: application/json
            Authorization: "Bearer ${hatoken}"
          on_response:
            then:
              - if:
                  condition:
                    lambda: |-
                      return status_code == 200;
                  then:
                    - if: