logger:
  level: INFO

api:
  services:
    - service: goto_screen
      variables:
        screen_name: string
      then:
      - lambda: |-
          goToScreenFromString(screen_name);

ota:

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}
  fast_connect: true

  ap:
    ssid: "${friendly_name} Fallback"
    password: ${wifi_fallback_password}

captive_portal:

http_request:
  useragent: esphome/device
  timeout: 10s

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 75%
    blue: 10%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: color_accent_primary
    red: ${color_accent_primary_red}
    green: ${color_accent_primary_green}
    blue: ${color_accent_primary_blue}
  - id: my_gray_dark
    red: 40%
    green: 40%
    blue: 40%
  - id: my_gray_dark_2
    red: 8%
    green: 8%
    blue: 8%
  - id: my_gray
    red: 10%
    green: 10%
    blue: 10%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

font:
## Font needs to be monospace!
  - file: "fonts/iosevka.ttf"
    id: large_font
    size: ${large_font_size}
    glyphs: '*/\$#<>!?"%()[]+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êÊîÎâÂôÔéÉíÍáÁóÓëËüÜïÏṣṢ''’'
  - file: "fonts/iosevka.ttf"
    id: medium_font
    size: ${medium_font_size}
    glyphs: '*/\$#<>!?"%()[]+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êÊîÎâÂôÔéÉíÍáÁóÓëËüÜïÏṣṢ''’'
  - file: "fonts/iosevka.ttf"
    id: small_font
    size: ${small_font_size}
    glyphs: '*/\$#<>!?"%()[]+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&êÊîÎâÂôÔéÉíÍáÁóÓëËüÜïÏṣṢ''’'
  - file: 'fonts/materialdesignicons-webfont.ttf' 
    id: material_font_large
    size: ${icon_size_large}
    glyphs: [
      '󰐊', # mdi-play
      '󰓛', # mdi-stop
      '󰏤', # home-pause
      '󰽥', # mdi-moon-waning-crescent
      '󰒝', # mdi-shuffle
      '󰒞', # mdi-shuffle-disabled
      '󰕾', # mdi-volume-high
      '󰕿', # mdi-volume-low
      '󰚺', # mdi-plex
      '󰝆', # mdi-netflix
      '󰗃', # mdi-youtube
      '󰓇', # mdi-spotify
      '󰔂', # mdi-television
    ]  
  - file: 'fonts/materialdesignicons-webfont.ttf' 
    id: material_font_small
    size: ${icon_size}
    glyphs: [
      '󰐊', # mdi-play
      '󰓛', # mdi-stop
      '󰏤', # home-pause
      '󰽥', # mdi-moon-waning-crescent
      '󰒝', # mdi-shuffle
      '󰒞', # mdi-shuffle-disabled
      '󰕾', # mdi-volume-high
      '󰕿', # mdi-volume-low
      '󰚺', # mdi-plex
      '󰝆', # mdi-netflix
      '󰗃', # mdi-youtube
      '󰓇', # mdi-spotify
      '󰔂', # mdi-television
    ]
    
globals:
## Size of the large font above
  - id: large_font_size
    type: int
    restore_value: no
    initial_value: ${large_font_size}
    
## Size of the medium font above
  - id: medium_font_size
    type: int
    restore_value: no
    initial_value: ${medium_font_size}
    
## Size of the small font above
  - id: small_font_size
    type: int
    restore_value: no
    initial_value: ${small_font_size}
    
## Height / width ratio of the monospace font used
  - id: font_size_width_ratio
    type: double
    restore_value: no
    initial_value: "0.6"
    
## Status bar height
  - id: header_height
    type: int
    restore_value: no
    initial_value: ${header_height}
    
## Global margin size
  - id: margin_size
    type: int
    restore_value: no
    initial_value: ${margin_size}
    
## Scrollbar total width
  - id: scroll_bar_width
    type: int
    restore_value: no
    initial_value: ${scroll_bar_width}
    
## Volume bar and media duration bar margin
  - id: bottom_bar_margin
    type: int
    restore_value: no
    initial_value: ${bottom_bar_margin}
    
## Height and width of the icons used in px
  - id: icon_size
    type: int
    restore_value: no
    initial_value: ${icon_size}
    
## Height and width of the icons used in px
  - id: icon_size_large
    type: int
    restore_value: no
    initial_value: ${icon_size_large}
    
## Max lines on now playing screen before truncating happens
  - id: now_playing_max_lines
    type: int
    restore_value: no
    initial_value: ${now_playing_max_lines}
    
## Draw buttons in now playing menu for 3 button devices
  - id: draw_now_playing_menu
    type: bool
    restore_value: no
    initial_value: ${draw_now_playing_menu}
    
## Draw battery icon if battery level is supported
  - id: draw_battery_level
    type: bool
    restore_value: no
    initial_value: ${draw_battery_level}
    
## Draw volume level in header
  - id: draw_volume_level
    type: bool
    restore_value: no
    initial_value: ${draw_volume_level}
    
## Draw shuffle icon if shuffle is disabled
  - id: draw_shuffle_disabled
    type: bool
    restore_value: no
    initial_value: ${draw_shuffle_disabled}
    
## Draw time in header
  - id: draw_header_time
    type: bool
    restore_value: no
    initial_value: ${draw_header_time}
    
## Customize device boot name
  - id: boot_device_name
    type: std::string
    restore_value: no
    initial_value: ${boot_name}

## Turn off display after x seconds of idle
  - id: display_timeout
    type: int
    restore_value: no
    initial_value: ${display_timeout}

## Go to sleep after x seconds of idle
  - id: sleep_after
    type: int
    restore_value: no
    initial_value: ${sleep_after}

## Let the menu selection roll-over when reaching the beginning/end
  - id: menu_rollover_on
    type: bool
    restore_value: no
    initial_value: ${menu_rollover_on}

## Find a new active media player if the current active one stops playing
  - id: sync_active_player
    type: bool
    restore_value: no
    initial_value: ${sync_active_player}

## Black background
  - id: dark_mode
    type: bool
    restore_value: no
    initial_value: ${dark_mode}
      
interval:
  - interval: 1s
    then:
    - lambda: |-
        idleTick();
  - interval: 0.3s
    then:
    - lambda: |-
        activeTick();

deep_sleep:
  id: deep_sleep_1

binary_sensor:
  - platform: status
    name: "${boot_name} Node Status"
    id: system_status

time:
  - platform: homeassistant
    id: esptime

custom_component:
# Home assistant speakers and tv. Set TV up with a sound bar
 - lambda: |-
     SpeakerSetup soundBar = SpeakerSetup("media_player.beam", "Beam");
     std::vector<TVSetup> tvSetup = {
       TVSetup("media_player.55_tcl_roku_tv", "TV", 
         &soundBar
       ),
       TVSetup("media_player.55_tcl_roku_tv", "Fake", NULL)
     };
     std::vector<SpeakerSetup> speakerSetup = {
       SpeakerSetup("media_player.kitchen", "Kitchen"),
       SpeakerSetup("media_player.bedroom", "Bedroom"),
       SpeakerSetup("media_player.office", "Office")
     };
     speakerGroup->setup(tvSetup, speakerSetup);
     App.register_component(speakerGroup);
     return {speakerGroup};
   id: speaker_group_component
 
 ## Home assistant scripts and scenes. Set with a friendly name
 - lambda: |-
     std::vector<BaseService> scenes { 
       ScriptService("script.colors", "Colors"), 
       ScriptService("script.warm", "Warm"), 
       ScriptService("script.dim_scene_script", "Dim"),
       ScriptService("script.off_script", "Lights Off"),
       SceneService("scene.hell", "Hell"),
       ScriptService("script.feed_cat_single", "Feed cat")
     };
     sceneGroup->setup(scenes);
     App.register_component(sceneGroup);
     return {sceneGroup};
   id: scene_group_component

 ## Home assistant lights. Set with a friendly name
 - lambda: |-
     std::vector<FriendlyNameEntity> lights { 
       FriendlyNameEntity("light.bathroom_lights", "Bathroom"), 
       FriendlyNameEntity("light.bedroom_lights", "Bedroom"), 
       FriendlyNameEntity("light.kitchen_lights", "Kitchen"), 
       FriendlyNameEntity("light.living_room_lights", "Living Room"), 
       FriendlyNameEntity("light.office_lamp", "Office Lamp")
     };
     lightGroup->setup(lights);
     App.register_component(lightGroup);
     return {lightGroup};
   id: light_group_component

 ## Home assistant sensors. Set with a friendly name
 - lambda: |-
     std::vector<FriendlyNameEntity> sensors {
       FriendlyNameEntity("sensor.vancouver_forecast", ""),
       FriendlyNameEntity("sensor.accuweather_realfeel_temperature", "Temperature"),
       FriendlyNameEntity("sensor.washing_machine_state", "Washing Machine"),
       FriendlyNameEntity("sensor.soil_sensor_soil_moisture_2", "Plant Moisture"),
       FriendlyNameEntity("sensor.particulate_matter_2_5um_concentration", "Kitchen Air")
     };
     sensorGroup->setup(sensors);
     App.register_component(sensorGroup);
     return {sensorGroup};
   id: sensor_group_component
